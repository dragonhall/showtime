require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe PlaylistsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Playlist. As you add validations to Playlist, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { 
      channel_id: create(:channel).id,
      title: Faker::Lorem.sentence,
      start_time: Faker::Time.forward(days: 30),
      intro_id: create(:intro).id,
      finalized: false,
      published: false
    }

  }

  let(:invalid_attributes) {
    {
      title: nil,
      channel_id: Channel.find_or_create_by(name: Faker::Name.first_name),
      start_time: Time.zone.now,
      intro_id: nil,
      finalized: false,
      published: false,
    }
    #skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PlaylistsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  login_admin

  describe "GET #index" do
    it "returns a success response" do
      playlist = Playlist.create! valid_attributes
      channel = playlist.channel
      get :index, params: {channel_id: channel.id}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      playlist = Playlist.create! valid_attributes
      channel = playlist.channel
      get :show, params: {channel_id: channel.id, id: playlist.to_param}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      channel = create :channel
      get :new, params: {channel_id: channel.id}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      playlist = Playlist.create! valid_attributes
      channel = playlist.channel
      get :edit, params: {channel_id: channel.id, id: playlist.to_param}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Playlist" do
        expect {
          post :create, params: {playlist: valid_attributes, channel_id: valid_attributes[:channel_id]}, session: valid_session
        }.to change(Playlist, :count).by(1)
      end

      it "redirects to the created playlist" do
        post :create, params: {playlist: valid_attributes, channel_id: valid_attributes[:channel_id]}, session: valid_session
        expect(response).to redirect_to root_url
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {playlist: invalid_attributes, channel_id: valid_attributes[:channel_id]}, session: valid_session
        expect(response).to be_success
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        { title: 'Lorem ipsum dolor sit amet 123!' }
        #skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested playlist" do
        playlist = Playlist.create! valid_attributes
        channel = playlist.channel
        put :update, params: {channel_id: channel.id, id: playlist.to_param, playlist: new_attributes}, session: valid_session
        playlist.reload
        #skip("Add assertions for updated state")
        expect(playlist.title).to eq 'Lorem ipsum dolor sit amet 123!'
      end

      it "redirects to the playlist" do
        playlist = Playlist.create! valid_attributes
        channel = playlist.channel
        put :update, params: {channel_id: channel.id, id: playlist.to_param, playlist: valid_attributes}, session: valid_session
        expect(response).to redirect_to root_url
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        playlist = Playlist.create! valid_attributes
        channel = playlist.channel
        put :update, params: {channel_id: channel.id, id: playlist.to_param, playlist: invalid_attributes}, session: valid_session
        expect(response).to be_success
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested playlist" do
      playlist = Playlist.create! valid_attributes
      channel = playlist.channel
      expect {
        delete :destroy, params: {channel_id: channel.id, id: playlist.to_param}, session: valid_session
      }.to change(Playlist, :count).by(-1)
    end

    it "redirects to the playlists list" do
      playlist = Playlist.create! valid_attributes
      channel = playlist.channel
      delete :destroy, params: {channel_id: channel.id, id: playlist.to_param}, session: valid_session
      expect(response).to redirect_to root_url
    end
  end

end
